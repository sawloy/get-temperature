# ----------------------------------------
# GitHub Actions Workflow: Temperature Mail Sender
# 功能：定时运行 send_json_mail.py，
# 优先从 Render API 获取今日天气；失败则本地抓取；邮件发送 JSON 附件。
# ----------------------------------------

name: Temperature Mail Sender

on:
  schedule:
    - cron: "5 22 * * *"    # 每天 07:05 JST（= 22:05 UTC）→ 按需调整
  workflow_dispatch:         # 支持手动执行

jobs:
  send:
    runs-on: ubuntu-latest
    concurrency:
      group: temp-mail
      cancel-in-progress: true
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
        # 检出代码

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        # 配置 Python 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4
        # 仅需 requests / bs4（Gmail SMTP 用标准库）

      # ✅ 可选预检：探活你的 Render API（不想预检可删除这个 step）
      - name: Precheck Temperature API
        run: |
          set -e
          echo "Checking Temperature API..."
          curl -sS -H "User-Agent: Mozilla/5.0" \
            "${{ env.TEMP_API_URL }}" | head -c 400
        env:
          TEMP_API_URL: https://get-temperature.onrender.com/today

      - name: Run mail script (with retry inside)
        run: python send_json_mail.py
        env:
          # 若你想覆盖默认 API_URL，可在这里设 TEMP_API_URL
          # TEMP_API_URL: https://get-temperature.onrender.com/today

          # 继续沿用 WBGT 的 Secrets
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          TO_ADDR:   ${{ secrets.TO_ADDR }}

          # 可选显示项
          MAIL_FROM: ${{ secrets.MAIL_FROM }}
          MAIL_SUBJECT_PREFIX: "[GET_TEMP]"
